// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: pharmacy.sql

package db

import (
	"context"
)

const countPharmacies = `-- name: CountPharmacies :one
SELECT COUNT(*) FROM pharmacies
`

func (q *Queries) CountPharmacies(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countPharmacies)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPharmacy = `-- name: CreatePharmacy :one
INSERT INTO pharmacies (
  npi, chain
) VALUES (
  $1, $2
)
RETURNING npi, chain, timestamp
`

type CreatePharmacyParams struct {
	NPI   string `json:"npi"`
	Chain string `json:"chain"`
}

func (q *Queries) CreatePharmacy(ctx context.Context, arg CreatePharmacyParams) (Pharmacy, error) {
	row := q.db.QueryRow(ctx, createPharmacy, arg.NPI, arg.Chain)
	var i Pharmacy
	err := row.Scan(&i.NPI, &i.Chain, &i.Timestamp)
	return i, err
}

const getPharmacy = `-- name: GetPharmacy :one
SELECT npi, chain, timestamp FROM pharmacies
WHERE npi = $1 LIMIT 1
`

func (q *Queries) GetPharmacy(ctx context.Context, npi string) (Pharmacy, error) {
	row := q.db.QueryRow(ctx, getPharmacy, npi)
	var i Pharmacy
	err := row.Scan(&i.NPI, &i.Chain, &i.Timestamp)
	return i, err
}
