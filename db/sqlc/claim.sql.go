// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: claim.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createClaim = `-- name: CreateClaim :one
INSERT INTO claims (
  ndc, quantity, npi, price     
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, ndc, quantity, npi, price, timestamp
`

type CreateClaimParams struct {
	NDC      string  `json:"ndc"`
	Quantity int64   `json:"quantity"`
	NPI      string  `json:"npi"`
	Price    float64 `json:"price"`
}

func (q *Queries) CreateClaim(ctx context.Context, arg CreateClaimParams) (Claim, error) {
	row := q.db.QueryRow(ctx, createClaim,
		arg.NDC,
		arg.Quantity,
		arg.NPI,
		arg.Price,
	)
	var i Claim
	err := row.Scan(
		&i.ID,
		&i.NDC,
		&i.Quantity,
		&i.NPI,
		&i.Price,
		&i.Timestamp,
	)
	return i, err
}

const deleteClaim = `-- name: DeleteClaim :exec
DELETE FROM claims
WHERE id = $1
`

func (q *Queries) DeleteClaim(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteClaim, id)
	return err
}

const getClaim = `-- name: GetClaim :one
SELECT id, ndc, quantity, npi, price, timestamp FROM claims
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetClaim(ctx context.Context, id uuid.UUID) (Claim, error) {
	row := q.db.QueryRow(ctx, getClaim, id)
	var i Claim
	err := row.Scan(
		&i.ID,
		&i.NDC,
		&i.Quantity,
		&i.NPI,
		&i.Price,
		&i.Timestamp,
	)
	return i, err
}
